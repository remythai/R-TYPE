name: Format, Build & Deploy

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format

      - name: Apply clang-format
        run: |
          find client/src client/include server/src server/include gameEngine/src gameEngine/include \
            \( -name '*.cpp' -o -name '*.hpp' -o -name '*.h' \) \
            -exec clang-format -i --style=file {} +

      - name: Check for formatting changes
        id: format_check
        run: |
          if git diff --quiet; then
            echo "No formatting changes needed"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Formatting changes detected"
            echo "changes=true" >> $GITHUB_OUTPUT
            git diff
          fi

      - name: Commit and push formatting changes
        if: steps.format_check.outputs.changes == 'true' && github.event_name == 'push'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "style: apply clang-format [skip ci]"
          git push

      - name: Fail on PR if formatting needed
        if: steps.format_check.outputs.changes == 'true' && github.event_name == 'pull_request'
        run: |
          echo "::error::Code formatting is required. Please run clang-format locally."
          exit 1

  build:
    runs-on: ubuntu-latest
    needs: format

    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential \
            libx11-dev libxrandr-dev libxcursor-dev libxi-dev \
            libudev-dev libgl1-mesa-dev libflac-dev libogg-dev \
            libvorbis-dev libopenal-dev libfreetype-dev \
            clang-format clang-tidy clangd doxygen graphviz

      - name: Run clang-tidy on client
        run: |
          cd client
          cmake -B .build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          
          # Verify compile_commands.json exists
          if [ ! -f .build/compile_commands.json ]; then
            echo "::error::compile_commands.json not generated"
            exit 1
          fi
          
          # Run clang-tidy with config file
          clang-tidy --config-file=../.clang-tidy \
            -p .build/compile_commands.json \
            $(find src include -name '*.cpp') \
            2>&1 | tee clang-tidy-output.txt
          
          # Check for errors
          if grep -q "error:" clang-tidy-output.txt; then
            echo "::error::clang-tidy found errors in client code"
            exit 1
          fi

      - name: Run clang-tidy on server
        run: |
          cd server
          cmake -B .build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          
          if [ ! -f .build/compile_commands.json ]; then
            echo "::error::compile_commands.json not generated"
            exit 1
          fi
          
          clang-tidy --config-file=../.clang-tidy \
            -p .build/compile_commands.json \
            $(find src include -name '*.cpp') \
            2>&1 | tee clang-tidy-output.txt
          
          if grep -q "error:" clang-tidy-output.txt; then
            echo "::error::clang-tidy found errors in server code"
            exit 1
          fi

      - name: Run clang-tidy on gameEngine
        run: |
          cd gameEngine
          cmake -B .build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          
          if [ ! -f .build/compile_commands.json ]; then
            echo "::error::compile_commands.json not generated"
            exit 1
          fi
          
          clang-tidy --config-file=../.clang-tidy \
            -p .build/compile_commands.json \
            $(find src include -name '*.cpp') \
            2>&1 | tee clang-tidy-output.txt
          
          if grep -q "error:" clang-tidy-output.txt; then
            echo "::error::clang-tidy found errors in gameEngine code"
            exit 1
          fi

      - name: Verify clangd config
        run: |
          if [ ! -f .clangd ]; then
            echo "::warning::.clangd file not found in root directory"
          else
            echo "‚úì .clangd configuration file found"
            cat .clangd
          fi

      - name: Client build
        run: |
          cd client/.build
          make -j$(nproc)

      - name: Server build 
        run: |
          cd server/.build
          make -j$(nproc)

      - name: GameEngine build
        run: |
          cd gameEngine
          cmake -B .build
          cd .build
          make -j$(nproc)

      - name: Generate documentation
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p docs_output
          # GameEngine documentation
          if [ -f "gameEngine/Doxyfile" ]; then
            echo "Generating GameEngine documentation..."
            cd gameEngine
            doxygen Doxyfile 2>&1 | tee doxygen.log
            cd ..
            if [ -d "gameEngine/docs/html" ]; then
              cp -r gameEngine/docs/html docs_output/gameEngine
              echo "GameEngine documentation generated"
            else
              echo "Error: gameEngine/docs/html not found"
              exit 1
            fi
          fi
          
          if [ -f "server/Doxyfile" ]; then
            echo "Generating Server documentation..."
            cd server
            doxygen Doxyfile 2>&1 | tee doxygen.log
            cd ..
            if [ -d "server/docs/html" ]; then
              cp -r server/docs/html docs_output/server
              echo "Server documentation generated"
            fi
          fi
          
          if [ -f "client/Doxyfile" ]; then
            echo "Generating Client documentation..."
            cd client
            doxygen Doxyfile 2>&1 | tee doxygen.log
            cd ..
            if [ -d "client/docs/html" ]; then
              cp -r client/docs/html docs_output/client
              echo "Client documentation generated"
            fi
          fi
          
          cat > docs_output/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Project Documentation</title>
            <style>
              * { margin: 0; padding: 0; box-sizing: border-box; }
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
              }
              .container {
                max-width: 900px;
                width: 100%;
                background: white;
                border-radius: 20px;
                padding: 50px;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
              }
              h1 {
                color: #2d3748;
                font-size: 2.5rem;
                margin-bottom: 10px;
                text-align: center;
              }
              .subtitle {
                text-align: center;
                color: #718096;
                margin-bottom: 40px;
                font-size: 1.1rem;
              }
              .doc-links {
                display: grid;
                gap: 20px;
                margin-top: 30px;
              }
              .doc-link {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                padding: 30px;
                border-radius: 15px;
                text-decoration: none;
                color: white;
                transition: transform 0.3s, box-shadow 0.3s;
                display: block;
              }
              .doc-link:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
              }
              .doc-link h2 {
                margin: 0 0 10px 0;
                font-size: 1.5rem;
              }
              .doc-link p {
                margin: 0;
                opacity: 0.9;
              }
              .icon {
                font-size: 2rem;
                margin-bottom: 10px;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>üìöProject Documentation by Antton Ducos, Louka Ortega-Cand, R√©my Thai & Simon Maigrot</h1>
              <p class="subtitle">Welcome to the technical documentation</p>
              <div class="doc-links">
                <a href="gameEngine/index.html" class="doc-link">
                  <div class="icon">üéÆ</div>
                  <h2>Game Engine ECS</h2>
                  <p>Entity Component System for 2D/3D Games</p>
                </a>
                <a href="server/index.html" class="doc-link" style="display: none;" id="server-link">
                  <div class="icon">üñ•Ô∏è</div>
                  <h2>Server</h2>
                  <p>Server documentation</p>
                </a>
                <a href="client/index.html" class="doc-link" style="display: none;" id="client-link">
                  <div class="icon">üíª</div>
                  <h2>Client</h2>
                  <p>Client documentation</p>
                </a>
              </div>
            </div>
            <script>
              fetch('server/index.html').then(() => {
                document.getElementById('server-link').style.display = 'block';
              }).catch(() => {});
              fetch('client/index.html').then(() => {
                document.getElementById('client-link').style.display = 'block';
              }).catch(() => {});
            </script>
          </body>
          </html>
          EOF

      - name: Upload artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs_output

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4