name: Build & Deploy

on:
  push:
    branches: [ main, dev ]
  pull_request:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format

      - name: Apply clang-format
        run: |
          if [ -d "client/src" ]; then
            find client/src \( -name '*.cpp' -o -name '*.hpp' -o -name '*.h' \) -exec clang-format -i --style=file {} +
          fi
          if [ -d "server/src" ]; then
            find server/src \( -name '*.cpp' -o -name '*.hpp' -o -name '*.h' \) -exec clang-format -i --style=file {} +
          fi
          if [ -d "gameEngine" ]; then
            find gameEngine/components gameEngine/systems gameEngine/ecs \( -name '*.cpp' -o -name '*.hpp' -o -name '*.h' \) -exec clang-format -i --style=file {} + 2>/dev/null || true
          fi

      - name: Check for formatting changes
        id: format_check
        run: |
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push formatting changes
        if: steps.format_check.outputs.changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "style: apply clang-format [skip ci]"
          git push origin HEAD:${{ github.ref_name }}

  build:
    runs-on: ubuntu-latest
    needs: format

    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential \
            libx11-dev libxrandr-dev libxcursor-dev libxi-dev \
            libudev-dev libgl1-mesa-dev libflac-dev libogg-dev \
            libvorbis-dev libopenal-dev libfreetype-dev \
            doxygen graphviz

      - name: Build client
        run: |
          cd client && cmake -B .build && cd .build && make -j$(nproc)

      - name: Build server
        run: |
          cd server && cmake -B .build && cd .build && make -j$(nproc)

      - name: Generate documentation (auto if missing)
        run: |
          mkdir -p docs_output

          generate_docs() {
            local module=$1
            if [ -f "$module/Doxyfile" ]; then
              echo "Generating documentation for $module..."
              cd $module
              doxygen Doxyfile 2>&1 | tee doxygen.log
              cd ..
              if [ -d "$module/docs/html" ]; then
                mkdir -p docs_output/$module
                cp -r $module/docs/html/* docs_output/$module/
              else
                echo "⚠ Warning: $module/docs/html not found"
              fi
            else
              echo "⚠ No Doxyfile for $module — skipping"
            fi
          }

          for module in client server gameEngine; do
            if [ ! -d "docs_output/$module" ]; then
              generate_docs "$module"
            else
              echo "✓ Existing documentation found for $module, skipping regeneration"
            fi
          done

          # Static index
          touch docs_output/.nojekyll
          cat > docs_output/index.html <<'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head><meta charset="UTF-8"><title>R-TYPE Docs</title></head>
          <body><h1>R-TYPE Documentation</h1><ul>
            <li><a href="client/index.html">Client</a></li>
            <li><a href="server/index.html">Server</a></li>
            <li><a href="gameEngine/index.html">GameEngine</a></li>
          </ul></body></html>
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs_output

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
